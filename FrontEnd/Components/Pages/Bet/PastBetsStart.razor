@page "/pastBetsStart"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@using FrontEnd.ViewModel

@attribute [Authorize]

@inject HttpClient httpClient

@if(myBetsToClosedMatchesList is null) {
    <h3>Betöltés...</h3>
} else {
    @if(myBetsToClosedMatchesList.Count() == 0) {
        <h3>Nincsenek lezárt tippjeid.</h3>
    } else {
        <div class="contest-container">
            <h3>Tippversenyek</h3>
            <table>
                <tr>
                    <th>Tippverseny neve</th>
                    <th>Kezdete</th>
                    <th>Vége</th>
                    <th></th>
                </tr>
                @foreach(var contest in myContestsList) {
                    bool isThereABet = false;
                    @foreach(var bet in myBetsToClosedMatchesList) {
                        @if(bet.ContestId == contest.Id) {
                            isThereABet = true;
                        }
                    }
                    @if(isThereABet) {
                        <tr>
                            <td>@contest.Name</td>
                            <td>@contest.StartDate.ToString("yyyy. MM. dd. hh:mm")</td>
                            <td>@contest.EndDate.ToString("yyyy. MM. dd. hh:mm")</td>
                            <td><a href="@($"pastBets?&contestId={contest.Id}")" class="btn btn-success">Tippek mutatása</a></td>
                        </tr>
                    }
                }
            </table>
        </div>
    }
}

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    private List<ContestVM> myContestsList = new List<ContestVM>();
    private List<List<MatchVM>> closedMatchesList = new List<List<MatchVM>>();
    private List<BetVM> myBetsToClosedMatchesList = new List<BetVM>();

    protected override async Task OnInitializedAsync() {
        string accessToken = httpContext.User.FindFirstValue("token");
        string userId = httpContext.User.FindFirstValue("id");

        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        //Minden tippverseny kigyüjtése amiben a játékos részt vesz/vett
        myContestsList = await httpClient.GetFromJsonAsync<List<ContestVM>>($"api/contest/userContests/{userId}");

        //Minden kigyűjtött tippversenyhez tartozó lezárt meccs megkeresése
        foreach(var contest in myContestsList) {
            var tmpMatchList = await httpClient.GetFromJsonAsync<List<MatchVM>>($"api/contest/closedMatches/{contest.Id}");
            closedMatchesList.Add(tmpMatchList);
        }

        //Minden kigyüjtőtt meccshez tartozó tipp összegyűjtése és div-ek nevének és láthatóságának beállítása
        int i = 0;
        foreach(var contest in myContestsList) {
            foreach(var matchInContest in closedMatchesList[i]) {
                BetVM betForMatchInContest = null;
                try {
                    betForMatchInContest = await httpClient.GetFromJsonAsync<BetVM>($"api/bet/getBetWithAllIds/{contest.Id}/{userId}/{matchInContest.Id}");
                }catch(HttpRequestException exc){}
                
                if(betForMatchInContest!= null)
                    myBetsToClosedMatchesList.Add(betForMatchInContest);
            }
            i++;
        }
    }
}
