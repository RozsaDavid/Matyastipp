@page "/profile"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Cryptography
@using System.Text
@using FrontEnd.ViewModel
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

@rendermode InteractiveServer


@if(editUser is null) {
    <h3>Betöltés...</h3>
    @errorMessage
} else {
    <div class="row">
        <div class="profile-box">
        <h3>Profil</h3>
        <div class="profile-box-form">
            <EditForm Model="editUser" OnValidSubmit="EditUser" FormName="EditUser" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-1">
                    <label for="username" class="form-label">Felhasználónév</label>
                    <InputText id="username" @bind-Value="editUser.Username" class="form-control" />
                    <ValidationMessage For="()=>editUser.Username" class="text-danger" />
                </div>

                <div class="mb-1">
                    <label for="realname" class="form-label">Valós név</label>
                    <InputText id="realname" @bind-Value="editUser.RealName" class="form-control" />
                    <ValidationMessage For="()=>editUser.RealName" class="text-danger" />
                </div>

                <div class="mb-1">
                    <label for="email" class="form-label">E-mail</label>
                    <InputText id="email" @bind-Value="editUser.Email" class="form-control" />
                    <ValidationMessage For="()=>editUser.Email" class="text-danger" />
                </div>

                <div class="mb-1">
                    <label for="password" class="form-label">Jelszó</label>
                    <InputText type="password" id="password" @bind-Value="editUser.Password" class="form-control" />
                    <ValidationMessage For="()=>editUser.Password" class="text-danger" />
                </div>

                <div class="mb-1 text-center">
                    <span class="text-danger">@errorMessage</span>
                </div>

                <button type="submit" class="btn btn-success md-4">Mentés</button>
            </EditForm>
            <button type="submit" class="btn btn-danger md-4" onclick="@InactivateUser">Fiók inaktiválása</button>
            <a href="/" class="btn btn-primary">Vissza</a>
        </div>
        </div>
    </div>

    
}

@code {

    [SupplyParameterFromQuery]
    private string actualUsername { get; set; }

    [SupplyParameterFromQuery]
    private string accessToken { get; set; }

    [SupplyParameterFromQuery]
    private string userId { get; set; }

    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    [SupplyParameterFromForm]
    private UserVM editUser { get; set; }

    List<UserVM> usersList = new();

    public string? errorMessage;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        editUser = await httpClient.GetFromJsonAsync<UserVM>($"api/user/getUserWithId/{userId}");
        if(editUser is null) {
            navigationManager.NavigateTo("/error");
        } else {
            editUser.Password = string.Empty;
        }
    }

    private async Task EditUser() {
        if(editUser.Password == string.Empty) {
            errorMessage = "Hibás jelszó!";
            return;
        }

        //megadott jelszó hashelése
        var source = Encoding.UTF8.GetBytes(editUser.Password);
        var hashBytes = MD5.Create().ComputeHash(source);
        editUser.Password = BitConverter.ToString(hashBytes).Replace("-", "");

        //új felhasználói adatok mentése
        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        var response = await httpClient.PutAsJsonAsync<UserVM>($"api/user/update/{editUser.Id}", editUser);
        editUser.Password = string.Empty;

        if(response.IsSuccessStatusCode) {
            //ha változott a felhasználónév akkor a Claim frissítéséhez átirányítás
            if(actualUsername!=editUser.Username)        
                navigationManager.NavigateTo("/changedUsername?actualUsername="+editUser.Username+"&accessToken="+accessToken+"&userId="+userId);
            else
                navigationManager.NavigateTo("/");
        } else {
            errorMessage = await response.Content.ReadAsStringAsync();
            errorMessage = errorMessage.Replace("\"", string.Empty);
        }
    }

    private async Task InactivateUser() {
        //megerősítés
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Biztosan inaktiválni akarod a fiókod?"); 

        if(confirmed) {
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

            var response = await httpClient.PutAsJsonAsync<UserVM>($"api/user/inactivate/{editUser.Id}", editUser);
            if(response.IsSuccessStatusCode) {
                navigationManager.NavigateTo("/logout");
            } else {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
    }
}

