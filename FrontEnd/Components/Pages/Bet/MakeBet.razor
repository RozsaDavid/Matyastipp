@page "/makeBet"

@using FrontEnd.ViewModel
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject HttpClient httpClient
@inject NavigationManager navigationManager

@rendermode InteractiveServer

@if(actualUser is null || actualMatch is null) {
    <h3>Betöltés...</h3>
    <div class="mb-3 text-center">
        @errorMessage
    </div>
}else{
    <div class="row">
        <div class="bet-form-container">
            <h3>Tipp leadása</h3>
            <div class="bet-form">
                <EditForm Model="newBet" OnValidSubmit="NewBet" FormName="NewBet" Enhance>
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="homeTeam" class="form-label">@actualMatch.HomeName:</label>
                        <InputNumber id="homeTeam" @bind-Value="newBet.HomeGoals" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label for="guestTeam" class="form-label">@actualMatch.GuestName</label>
                        <InputNumber id="guestTeam" @bind-Value="newBet.GuestGoals" class="form-control" />
                    </div>

                    <div class="mb-3 text-center error-message">
                        @errorMessage
                    </div>

                    <button type="submit" class="btn btn-success md-4">Mentés</button>
                    <a href="@prevPage" class="btn btn-primary">Vissza</a>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {

    [SupplyParameterFromQuery]
    private int contestId { get; set; }

    [SupplyParameterFromQuery]
    private string accessToken { get; set; }

    [SupplyParameterFromQuery]
    private int matchId { get; set; }

    [SupplyParameterFromQuery]
    private string prevPage { get; set; }

    [SupplyParameterFromForm]
    private BetVM newBet { get; set; }

    private UserVM actualUser{ get; set; }

    private MatchVM actualMatch { get; set; }

    private string? errorMessage;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        actualUser = await httpClient.GetFromJsonAsync<UserVM>($"api/user/getUserWithToken");
        actualMatch = await httpClient.GetFromJsonAsync<MatchVM>($"api/match/getMatchWithId/{matchId}");

        newBet = new BetVM();
        newBet.MatchId=matchId;
        newBet.ContestId = contestId;
        newBet.UserId = actualUser.Id;
        newBet.IsWon = 0;
    }

    private async Task NewBet() {
        if(newBet.GuestGoals<0 || newBet.HomeGoals < 0) {
            errorMessage = "Érvénytelen tipp";
            return;
        }

        string[] newBetData = { newBet.MatchId.ToString(), newBet.ContestId.ToString(), newBet.UserId.ToString(), newBet.IsWon.ToString(), newBet.GuestGoals.ToString(), newBet.HomeGoals.ToString() };

        try {
            var response = await httpClient.PostAsJsonAsync("api/bet/addBet", newBetData);

            if(response.IsSuccessStatusCode)
                navigationManager.NavigateTo($"{prevPage}");
            else {
                errorMessage = await response.Content.ReadAsStringAsync();
                errorMessage += newBetData;
                return;
            }
        } catch(NavigationException navEx) {
            navigationManager.NavigateTo($"{prevPage}");
        } catch(Exception ex) {
            navigationManager.NavigateTo("/apierror");
        }
        
    }
}


