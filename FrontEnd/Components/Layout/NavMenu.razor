@inject NavigationManager navigationManager

@rendermode InteractiveServer

<nav>
    <ul class="@orderSide">
        <li><a class="@entryActive" @onclick="@menuEntry" @onclick:preventDefault><span>Nevezés</span></a>
            <ul class="@submenuEntry">
                <li><a @onclick="@menuSignUpcoming" @onclick:preventDefault>Közelgő</a></li>
                <li><a @onclick="@menuSignOngoing" @onclick:preventDefault>Folyamatban</a></li>
            </ul>
        </li>
        <li><a class="@contestActive" @onclick="@menuContest" @onclick:preventDefault>Tippversenyeim</a>
            <ul class="@submenuContest">
                <li><a @onclick="@menuUpcoming" @onclick:preventDefault>Közelgő</a></li>
                <li><a @onclick="@menuOngoing" @onclick:preventDefault>Folyamatban</a></li>
                <li><a @onclick="@menuPast" @onclick:preventDefault>Lezárult</a></li>
            </ul>
        </li>
        <li><a class="@betActive" @onclick="@menuBet" @onclick:preventDefault>Tippek</a>
            <ul class="@submenuBet">
                <li><a @onclick="@menuOpened" @onclick:preventDefault>Nyitott</a></li>
                <li><a @onclick="@menuActive" @onclick:preventDefault>Aktív</a></li>
                <li><a @onclick="@menuPastBet" @onclick:preventDefault>Lezárt</a></li>
            </ul>
        </li>
    </ul>
</nav>

@code {
    private string entryActive = "";
    private string contestActive = "";
    private string betActive = "";
    private string submenuEntry = "submenu_inactive";
    private string submenuContest = "submenu_inactive";
    private string submenuBet = "submenu_inactive";
    private string orderSide = "orderSide";

    private void menuEntry() {
        entryActive = "active";
        contestActive = "";
        betActive = "";
        submenuContest = "submenu_inactive";
        submenuBet = "submenu_inactive";

        if(submenuEntry != "submenu_active"){
            submenuEntry = "submenu_active";
            orderSide = "";
        } else {
            submenuEntry = "submenu_inactive";
            orderSide = "orderSide";
        }

    }

    private void menuContest() {
        entryActive = "";
        contestActive = "active";
        betActive = "";

        submenuEntry = "submenu_inactive";
        submenuBet = "submenu_inactive";

        if(submenuContest != "submenu_active") {
            submenuContest = "submenu_active";
            orderSide = "";
        } else {
            submenuContest = "submenu_inactive";
            orderSide = "orderSide";
        }

    }

    private void menuBet() {
        entryActive = "";
        contestActive = "";
        betActive = "active";

        submenuEntry = "submenu_inactive";
        submenuContest = "submenu_inactive";

        if(submenuBet != "submenu_active") {
            submenuBet = "submenu_active";
            orderSide = "";
        } else {
            submenuBet = "submenu_inactive";
            orderSide = "orderSide";
        }

    }

    private void menuSignUpcoming() {
        submenuEntry = "submenu_inactive";
        navigationManager.NavigateTo("/signUpcoming");
    }

    private void menuSignOngoing() {
        submenuEntry = "submenu_inactive";
        navigationManager.NavigateTo("/signOngoing");
    }

    private void menuUpcoming() {
        submenuContest = "submenu_inactive";
        navigationManager.NavigateTo("/upcoming");
    }

    private void menuOngoing() {
        submenuContest = "submenu_inactive";
        navigationManager.NavigateTo("/ongoing");
    }

    private void menuPast() {
        submenuContest = "submenu_inactive";
        navigationManager.NavigateTo("/past");
    }

    private void menuOpened() {
        submenuBet = "submenu_inactive";
        navigationManager.NavigateTo("/allOpenedMatches");
    }

    private void menuActive() {
        submenuBet = "submenu_inactive";
        navigationManager.NavigateTo("/activeBets");
    }

    private void menuPastBet() {
        submenuBet = "submenu_inactive";
        navigationManager.NavigateTo("/pastBetsStart");
    }
}

@code{
    protected override async Task OnInitializedAsync() {
        StateHasChanged();
    }
}