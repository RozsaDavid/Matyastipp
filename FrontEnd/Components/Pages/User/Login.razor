@page "/login"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Cryptography
@using System.Text
@using FrontEnd.ViewModel

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>Bejelentkezés</PageTitle>

<div class="row">
    <div class="login-form-container">
        <h3>Bejelentkezés</h3>
        <div class="login-form">
        <EditForm Model="loginUser" FormName="LoginForm" OnValidSubmit="Authenticate" Enhance>
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="username" class="form-label">Felhasználónév:</label>
                <InputText id="username" @bind-Value="loginUser.Username" class="form-control" placeholder="Felhasználónév" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Jelszó:</label>
                <InputText type="password" id="password" @bind-Value="loginUser.Password" class="form-control" placeholder="Jelszó" />
                    <div class="error-message">
                        <ValidationMessage For="()=>loginUser.Email" />
                    </div>
            </div>

            <div class="mb-3 text-center error-message">
                @errorMessage
            </div>
        
            <button type="submit" class="btn btn-primary">Bejelentkezés</button>

        </EditForm>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    [SupplyParameterFromForm]
    public UserVM loginUser { get; set; } = new();

    private List<UserVM>usersList = new();

    private string errorMessage;

    private async Task Authenticate() {
        //jelszó titkosítása
        var source = Encoding.UTF8.GetBytes(loginUser.Password);
        var hashBytes = MD5.Create().ComputeHash(source);
        loginUser.Password = BitConverter.ToString(hashBytes).Replace("-", "");

        //adatok előkészítése az apinak
        string[] userData = { loginUser.Username, loginUser.Password };
        loginUser.Password = String.Empty;

        try {
            //api hívás
            var response = await httpClient.PostAsJsonAsync("api/user/login", userData);

            //felhasználó bejelentkeztetése
            if(response.IsSuccessStatusCode) {
                string accessToken = await response.Content.ReadAsStringAsync();
                accessToken = accessToken.Replace("\"", string.Empty);
                accessToken = accessToken.Replace("}", string.Empty);
                string[] splittedAccessToken = accessToken.Split(":");
                accessToken = splittedAccessToken[1];

                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
                httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

                //Ha ez működik akkor jó a token (duplaellenőrzés)
                var user = await httpClient.GetFromJsonAsync<UserVM>("api/user/getUserWithToken");

                //ha jó, akkor bejelentkezés és token + adatok mentése Claim-ként
                if(user != null) {

                    var claims = new List<Claim>{
                    new Claim(ClaimTypes.Name, user.Username),
                    new Claim("token", accessToken),
                    new Claim("id", user.Id.ToString())
                };

                    ClaimsIdentity identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                    ClaimsPrincipal principal = new ClaimsPrincipal(identity);

                    await httpContext.SignInAsync(principal);

                    httpContext.Response.Redirect("/");
                } else {
                    errorMessage = "Hiba a bejelentkezés során.";
                }
            } else {
                errorMessage = await response.Content.ReadAsStringAsync();
                errorMessage = errorMessage.Replace("}", string.Empty);
            }
        } catch(Exception ex) {
            navigationManager.NavigateTo("/apierror");
        }
    }
}
