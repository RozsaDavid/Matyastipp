@page "/standings"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@using FrontEnd.ViewModel

@attribute [Authorize]

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>Ranglista</PageTitle>

<div class="standing-container">
    @if(standingList is null) {
        <h3>Betöltés...</h3>
    } else {
            <h3>Ranglista</h3>
            <table>
                <tr>
                    <th>Helyezés</th>
                    <th>Név</th>
                    <th>Pontszám</th>
                </tr>
                @for(int i = 0;i < standingList.Count();i++) {
                    <tr>
                        <td>@(i + 1)</td>
                        <td style="word-break: break-all;">@standingList[i].Username</td>
                        <td>@standingList[i].Points</td>
                    </tr>
                }
            </table>
        }
    <a href="@prevPage" class="btn btn-primary">Vissza</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int contestId { get; set; }

    [SupplyParameterFromQuery]
    private string prevPage { get; set; }

    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    private List<string> standingSTR = new List<string>();

    private List<StandingVM> standingList = new();

    protected override async Task OnInitializedAsync() {
        string accessToken = httpContext.User.FindFirstValue("token");

        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        try {
            standingSTR = 
                await httpClient.GetFromJsonAsync<List<string>>
                    ($"api/contest/standing/{contestId}");

            foreach(string stnd in standingSTR) {
                string[] tmp = stnd.Split(';');
                StandingVM stndTMP = new StandingVM();
                stndTMP.Username = tmp[0];
                stndTMP.Points = Int32.Parse(tmp[1]);
                standingList.Add(stndTMP);
            }

            standingList = standingList.OrderByDescending(s => s.Points).ToList();
        } catch(Exception ex) {
            navigationManager.NavigateTo("/apierror");
        }
    }
}
