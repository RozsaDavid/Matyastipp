@page "/signUpcoming"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@using FrontEnd.ViewModel

@attribute [Authorize]

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<div class="contest-container">
    @if(upcomingContestsList is null) {
        <h3>Betöltés...</h3>
    } else {
        @if(upcomingContestsList.Count == 0) {
            <h3>Nincsenek közelgő nyitott tippversenyek.</h3>
        } else {
            <h3>Közelgő nyitott tippversenyek</h3>
            <table>
                <tr>
                    <th>Név</th>
                    <th>Kezdés</th>
                    <th>Befejezés</th>
                    <th></th>
                </tr>
                @foreach(var contest in upcomingContestsList) {
                    <tr>
                        <td style="word-break: break-all;">@contest.Name</td>
                        <td>@contest.StartDate.ToString("yyyy. MM. dd. hh:mm")</td>
                        <td>@contest.EndDate.ToString("yyyy. MM. dd. hh:mm")</td>
                        <td><a href="@($"signUp?contestId={contest.Id}&prevPage=/signUpcoming")" class="btn btn-success">Nevezés</a></td>
                    </tr>
                }
            </table>
            <div class="mb-1 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
        }
    }
</div>

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    private List<ContestVM> upcomingContestsList = new();

    private string errorMessage;

    protected override async Task OnInitializedAsync() {
        string accessToken = httpContext.User.FindFirstValue("token");
        string userId = httpContext.User.FindFirstValue("id");

        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        upcomingContestsList = await httpClient.GetFromJsonAsync<List<ContestVM>>($"api/contest/availableUpcomingContest/{userId}");
    }
}

