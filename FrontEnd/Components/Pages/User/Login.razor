@page "/login"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Cryptography
@using System.Text
@using FrontEnd.ViewModel

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>Bejelentkezés</h3>
<hr />

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <h3>Login</h3>

        <EditForm Model="loginModel" FormName="LoginForm" OnValidSubmit="Authenticate" Enhance>
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="username" class="form-label">Felhasználónév:</label>
                <InputText id="username" @bind-Value="loginModel.Username" class="form-control" placeholder="Felhasználónév" />
                <ValidationMessage For="()=>loginModel.Username" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Jelszó:</label>
                <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Jelszó" />
                <ValidationMessage For="()=>loginModel.Password" class="text-danger" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>

            <button type="submit" class="btn btn-primary">Bejelentkezés</button>

        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    [SupplyParameterFromForm]
    public UserVM loginModel { get; set; } = new();

    List<UserVM>usersList = new();

    public string? errorMessage;

    private async Task Authenticate() {
        //jelszó kódolása
        var source = Encoding.UTF8.GetBytes(loginModel.Password);
        var hashBytes = MD5.Create().ComputeHash(source);
        loginModel.Password = BitConverter.ToString(hashBytes).Replace("-", "");

        //adatok előkészítése az apinak
        string[] userData = { loginModel.Username, loginModel.Password };
        loginModel.Password = String.Empty;
        //api
        var response = await httpClient.PostAsJsonAsync("api/user/login", userData);

        //felhasználó bejelentkeztetése
        if(response.IsSuccessStatusCode) {
            string accessToken = await response.Content.ReadAsStringAsync();
            accessToken = accessToken.Replace("\"", string.Empty);
            accessToken = accessToken.Replace("}", string.Empty);
            string[] splittedAccessToken = accessToken.Split(":");
            accessToken = splittedAccessToken[1];

            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

            //Ha ez működik akkor jó a token (duplaellenőrzés)
            var user = await httpClient.GetFromJsonAsync<UserVM>("api/user/getUserWithToken");

            //ha jó, akkor bejelentkezés és token mentése Claim-ként
            if (user != null){
                
                var claims = new List<Claim>{
                    new Claim(ClaimTypes.Name, user.Username),
                    new Claim("token", accessToken),
                    new Claim("id", user.Id.ToString())
                };

                ClaimsIdentity identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                ClaimsPrincipal principal = new ClaimsPrincipal(identity);

                await httpContext.SignInAsync(principal);
                              
                httpContext.Response.Redirect("Home");
                navigationManager.NavigateTo("/");
            } else {
                errorMessage = "Hiba a bejelentkezés során.";
            }
        } else {
            errorMessage = await response.Content.ReadAsStringAsync(); 
        }

    }
}
