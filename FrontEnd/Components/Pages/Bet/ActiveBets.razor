@page "/activeBets"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@using FrontEnd.ViewModel

@attribute [Authorize]

@inject HttpClient httpClient

@if(myBets is null) {
    <h3>Betöltés...</h3>
} else {
    @if(myBets.Count == 0) {
        <h3>Nincsenek aktív tippjeid</h3>
    } else {
        <div class="bet-container">
            <h3>Aktív tippek</h3>
            <table>
                <tr>
                    <th>Tippverseny</th>
                    <th>Hazai csapat</th>
                    <th>Vendég csapat</th>
                    <th>Tippelt eredmény</th>
                    <th>Kezdés</th>
                    <th></th>
                </tr>
                @for(int i=0;i<myBets.Count;i++) {
                    <tr>
                        <td style="word-break: break-all;">@betsContests[i].Name</td>
                        <td style="word-break: break-all;">@betsMatches[i].HomeName</td>
                        <td style="word-break: break-all;">@betsMatches[i].GuestName</td>
                        <td>@myBets[i].HomeGoals : @myBets[i].GuestGoals</td>
                        <td>@betsMatches[i].Date.ToString("yyyy. MM. dd. hh:mm")</td>
                        <td><a href="@($"editBet?accessToken={accessToken}&prevPage=/activeBets&betId={myBets[i].Id}")" class="btn btn-success">Tipp szerkesztése</a></td>
                    </tr>
                }
            </table>
        </div>
                
        <div class="mb-1 text-center">
            <span class="text-danger">@errorMessage</span>
        </div>
    }
}


@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    private List<BetVM> myBets = new List<BetVM>();
    private List<ContestVM> betsContests = new List<ContestVM>();
    private List<MatchVM> betsMatches = new List<MatchVM>();

    private string accessToken;
    private string errorMessage;

    protected override async Task OnInitializedAsync() {
        accessToken = httpContext.User.FindFirstValue("token");
        string userId = httpContext.User.FindFirstValue("id");

        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        myBets = await httpClient.GetFromJsonAsync<List<BetVM>>($"api/bet/userBets/{userId}");

        foreach(var bet in myBets) {
            betsContests.Add(await httpClient.GetFromJsonAsync<ContestVM>($"api/contest/getContestWithId/{bet.ContestId}"));
            betsMatches.Add(await httpClient.GetFromJsonAsync<MatchVM>($"api/match/getMatchWithId/{bet.MatchId}"));
        }
    }
}


