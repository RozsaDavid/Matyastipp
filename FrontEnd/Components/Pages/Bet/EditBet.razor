@page "/editBet"

@using FrontEnd.ViewModel

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<h3>Tipp szerkesztése</h3>

@if(editBet is null) {
    <p>Loading...</p>
    @errorMessage
} else {

    <div class="row">
        <div class="col-md-4">
            <EditForm Model="editBet" OnValidSubmit="BetEdit" FormName="EditBet" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="mb-3">
                    <label for="homeTeam" class="form-label">@homeTeam</label>
                    <InputNumber id="homeTeam" @bind-Value="editBet.HomeGoals" class="form-control" />
                    <ValidationMessage For="()=>editBet.HomeGoals" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="guestTeam" class="form-label">@guestTeam</label>
                    <InputNumber id="guestTeam" @bind-Value="editBet.GuestGoals" class="form-control" />
                    <ValidationMessage For="()=>editBet.GuestGoals" class="text-danger" />
                </div>

                <div class="mb-3 text-center">
                    <span class="text-danger">@errorMessage</span>
                </div>

                <button type="submit" class="btn btn-primary md-4">Mentés</button>
                <a href="/" class="btn btn-success">Vissza</a>
            </EditForm>
        </div>
    </div>

}

@code {
    [SupplyParameterFromQuery]
    private string accessToken { get; set; }

    [SupplyParameterFromQuery]
    private string prevPage { get; set; }

    [SupplyParameterFromQuery]
    private int betId { get; set; }

    [SupplyParameterFromForm]
    private BetVM editBet { get; set; }

    private MatchVM actualMatch { get; set; }

    public string homeTeam;
    public string guestTeam;

    public string? errorMessage;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        editBet = await httpClient.GetFromJsonAsync<BetVM>($"api/bet/getBetWithId/{betId}");
        if(editBet is null) {
            navigationManager.NavigateTo("/error");
        }

        actualMatch = await httpClient.GetFromJsonAsync<MatchVM>($"api/match/getMatchWithId/{editBet.MatchId}");
        if(actualMatch is null) {
            navigationManager.NavigateTo("/error");
        }

        homeTeam = actualMatch.HomeName;
        guestTeam = actualMatch.GuestName;
    }

    private async Task BetEdit() {
        if (editBet.GuestGoals < 0 || editBet.HomeGoals < 0 ) {
            errorMessage = "Érvénytelen tipp";
            return;
        }

        int[] editBetData = { editBet.HomeGoals, editBet.GuestGoals };

        var response = await httpClient.PutAsJsonAsync<int[]>($"api/bet/update/{editBet.Id}", editBetData);

        if(response.IsSuccessStatusCode) {
            navigationManager.NavigateTo($"{prevPage}");
        } else {
            errorMessage = await response.Content.ReadAsStringAsync();
            return;
        }
    }
}


