@page "/editBet"

@using FrontEnd.ViewModel
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject HttpClient httpClient
@inject NavigationManager navigationManager

@rendermode InteractiveServer

@if(actualMatch is null || editBet is null) {
    <h3>Betöltés...</h3>
    <div class="mb-3 text-center">
        @errorMessage
    </div>
} else {
    <div class="row">
        <div class="bet-form-container">
            <h3>Tipp szerkesztése</h3>
            <div class="bet-form">
                <EditForm Model="editBet" OnValidSubmit="BetEdit" FormName="EditBet" Enhance>
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="homeTeam" class="form-label">@actualMatch.HomeName :</label>
                        <InputNumber id="homeTeam" @bind-Value="editBet.HomeGoals" class="form-control" />
                    </div>

                    <div class="mb-3">
                        <label for="guestTeam" class="form-label">@actualMatch.GuestName</label>
                        <InputNumber id="guestTeam" @bind-Value="editBet.GuestGoals" class="form-control" />
                    </div>

                    <div class="mb-3 text-center error-message">
                        @errorMessage
                    </div>

                    <button type="submit" class="btn btn-success md-4">Mentés</button>
                    <a href="@prevPage" class="btn btn-primary">Vissza</a>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private string accessToken { get; set; }

    [SupplyParameterFromQuery]
    private string prevPage { get; set; }

    [SupplyParameterFromQuery]
    private int betId { get; set; }

    [SupplyParameterFromForm]
    private BetVM editBet { get; set; }

    private MatchVM actualMatch { get; set; }

    private string? errorMessage;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        editBet = await httpClient.GetFromJsonAsync<BetVM>($"api/bet/getBetWithId/{betId}");
        actualMatch = await httpClient.GetFromJsonAsync<MatchVM>($"api/match/getMatchWithId/{editBet.MatchId}");
    }

    private async Task BetEdit() {
        if (editBet.GuestGoals < 0 || editBet.HomeGoals < 0 ) {
            errorMessage = "Érvénytelen tipp";
            return;
        }

        int[] editBetData = { editBet.HomeGoals, editBet.GuestGoals };

        try {
            var response = await httpClient.PutAsJsonAsync<int[]>($"api/bet/update/{editBet.Id}", editBetData);

            if(response.IsSuccessStatusCode) {
                navigationManager.NavigateTo($"{prevPage}");
            } else {
                errorMessage = await response.Content.ReadAsStringAsync();
                return;
            }
        } catch(NavigationException navEx) {
            navigationManager.NavigateTo($"{prevPage}");
        } catch(Exception ex) {
            navigationManager.NavigateTo("/apierror");
        }
    }
        
}


