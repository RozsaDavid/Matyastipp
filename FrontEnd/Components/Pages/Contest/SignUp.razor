@page "/signUp"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies

@using FrontEnd.ViewModel
@inject HttpClient httpClient
@inject NavigationManager navigationManager

Nevezés...

@errorMessage

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    [SupplyParameterFromQuery]
    string contestId { get; set; }

    [SupplyParameterFromQuery]
    string prevPage { get; set; }

    string errorMessage;

    protected override async Task OnInitializedAsync() {
        string accessToken = httpContext.User.FindFirstValue("token");
        string userId = httpContext.User.FindFirstValue("id");

        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        string[] signOnData = { userId.ToString(), contestId.ToString() };

        var response = await httpClient.PostAsJsonAsync("api/contest/signContest", signOnData);

        if(response.IsSuccessStatusCode) {
            navigationManager.NavigateTo($"{prevPage}");
        } else {
            errorMessage = await response.Content.ReadAsStringAsync();
            errorMessage += "Valami nem jó.";
        }
    }
}
