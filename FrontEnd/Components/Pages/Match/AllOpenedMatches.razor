@page "/allOpenedMatches"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@using FrontEnd.ViewModel

@attribute [Authorize]

@inject HttpClient httpClient
@inject NavigationManager navigationManager

@if(myContestsList is null) {
    <h3>Betöltés...</h3>
} else {
    @if(myContestsList.Count == 0) {
        <h3>Nincsenek nyitott mérkőzések</h3>
    } else {
        <h3>Nyitott mérkőzések</h3>
        @foreach(var contest in myContestsList) {
            @if(openedMatchesList[i].Count > 0) {
                <div class="match-container">
                    <h4 style="word-break: break-all;">@contest.Name</h4>
                        @foreach(var match in openedMatchesList[i]) {
                            <table>
                                <tr>
                                    <th>Hazai csapat</th>
                                    <th>Vendég csapat</th>
                                    <th>Kezdés</th>
                                    <th></th>
                                </tr>
                                <tr>
                                    <td style="word-break: break-all;">@match.HomeName</td>
                                    <td style="word-break: break-all;">@match.GuestName</td>
                                    <td>@match.Date.ToString("yyyy. MM. dd. hh:mm")</td>
                                    <td><a href="@($"makeBet?matchId={match.Id}&contestId={contest.Id}&accessToken={accessToken}&prevPage=/allOpenedMatches")" class="btn btn-success">Tippelés</a></td>
                                </tr>
                            </table>
                        }
                    
                </div>
            }
            <div hidden>@(i++)</div>
        }
    }
}

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    private List<List<MatchVM>> openedMatchesList = new List< List< MatchVM>> ();
    private List<ContestVM> myContestsList = new List<ContestVM>();

    private string accessToken;

    int i = 0;

    protected override async Task OnInitializedAsync() {
        accessToken = httpContext.User.FindFirstValue("token");
        string userId = httpContext.User.FindFirstValue("id");

        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        List<ContestVM> tmpContestsList = new List<ContestVM>();

        try {
            tmpContestsList = await httpClient.GetFromJsonAsync<List<ContestVM>>($"api/contest/userOngoingContests/{userId}");

            foreach(var contest in tmpContestsList)
                myContestsList.Add(contest);

            tmpContestsList = await httpClient.GetFromJsonAsync<List<ContestVM>>($"api/contest/userUpcomingContests/{userId}");

            foreach(var contest in tmpContestsList)
                myContestsList.Add(contest);

            foreach(var contest in myContestsList) {
                var tmpMatchList = await httpClient.GetFromJsonAsync<List<MatchVM>>($"api/contest/openedMatches/{contest.Id}/{userId}");
                openedMatchesList.Add(tmpMatchList);
            }
        } catch(Exception ex) {
            navigationManager.NavigateTo("/apierror");
        }
    }
}

