@page "/pastBets"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authentication.Cookies
@using FrontEnd.ViewModel

@attribute [Authorize]

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>Lezárt tippek</PageTitle>

@if(myBetsToClosedMatchesList is null) {
    <h3>Betöltés...</h3>
} else {
        @foreach(var contest in myContestsList) {
            @if(contest.Id == contestId) {
            <div class="bet-container">
                <h3>@contest.Name</h3>
                <table>
                    <tr>
                        <th>Hazai csapat</th>
                        <th>Vendég csapat</th>
                        <th>Tippelt eredmény</th>
                        <th>Végeredmény</th>
                        <th></th>
                    </tr>
                    @foreach(var bet in myBetsToClosedMatchesList) {
                        @if(bet.ContestId == contestId)
                            @foreach(var match in closedMatchesList[i]) {
                                @if(bet.MatchId == match.Id) {
                                    <tr>
                                        <td>@match.HomeName</td>
                                        <td>@match.GuestName</td>
                                        <td>@bet.HomeGoals : @bet.GuestGoals</td>
                                        <td>@match.HomeGoals : @match.GuestGoals</td>
                                        @if(bet.IsWon==1) {
                                            <td style="color: green;">Nyert!</td>
                                        } else {
                                            <td style="color: red;">Nem nyert!</td>
                                        }
                                    </tr>
                                }
                            }
                        }
                    
                </table>
                <a href="pastBetsStart" class="btn btn-primary">Vissza</a>
            </div>
            }
            <div hidden>@(i++)</div>
        }
}

@code {
    [CascadingParameter]
    public HttpContext httpContext { get; set; }

    [SupplyParameterFromQuery]
    private int contestId { get; set; }

    private List<ContestVM> myContestsList = new List<ContestVM>();
    private List<List<MatchVM>> closedMatchesList = new List<List<MatchVM>>();
    private List<BetVM> myBetsToClosedMatchesList = new List<BetVM>();

    private int i=0;

    protected override async Task OnInitializedAsync() {
        string accessToken = httpContext.User.FindFirstValue("token");
        string userId = httpContext.User.FindFirstValue("id");

        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");

        try {
            //Minden tippverseny kigyüjtése amiben a játékos részt vesz/vett
            myContestsList = await httpClient.GetFromJsonAsync<List<ContestVM>>($"api/contest/userContests/{userId}");

            //Minden kigyűjtött tippversenyhez tartozó lezárt meccs megkeresése
            foreach(var contest in myContestsList) {
                var tmpMatchList = await httpClient.GetFromJsonAsync<List<MatchVM>>($"api/match/closedMatches/{contest.Id}");
                closedMatchesList.Add(tmpMatchList);
            }

            //Minden kigyüjtőtt meccshez tartozó tipp összegyűjtése
            int j = 0;
            foreach(var contest in myContestsList) {
                foreach(var matchInContest in closedMatchesList[j]) {
                    BetVM betForMatchInContest = null;
                    try {
                        betForMatchInContest = await httpClient.GetFromJsonAsync<BetVM>($"api/bet/getBetWithAllIds/{contest.Id}/{userId}/{matchInContest.Id}");
                    } catch(HttpRequestException httpEx) { }

                    if(betForMatchInContest != null)
                        myBetsToClosedMatchesList.Add(betForMatchInContest);
                }
                j++;
            }
        } catch(Exception ex) {
            navigationManager.NavigateTo("/apierror");
        }

        
    }
}